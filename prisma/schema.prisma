datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
 
generator client {
  provider = "prisma-client-js"
}

enum UserRole {
  ADMIN
  CLIENT
}

enum PostType {
  ARTICLE
  PORTFOLIO
  SERVICE
  TASK
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  phone         String?
  role          UserRole        @default(CLIENT)
  emailVerified DateTime?
  image         String?
  accounts      Account[]       // аккаунты пользователя
  sessions      Session[]       // сессии пользователя
  posts         Post[]          // посты пользователя
  images        Images[]        // фото пользователя

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@map("users")
}

model Post {
  id            String    @id @default(cuid())
  postType      PostType  @default(ARTICLE)
  slug          String    @unique // Уникальный slug
  title         String?
  description   String?
  price         String?
  video         String?
  image         String?
  userId        String
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Связь с изображениями через промежуточную таблицу
  images        PostImage[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@map("posts")
}

model Images {
  id            String    @id @default(cuid())
  url           String?
  userId        String
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Связь с постами через промежуточную таблицу
  posts         PostImage[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
   @@map("images")
}

model PostImage {
  postId        String
  imageId       String

  post          Post      @relation(fields: [postId], references: [id], onDelete: Cascade)
  image         Images    @relation(fields: [imageId], references: [id], onDelete: NoAction)

  @@id([postId, imageId])
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
  @@map("verification_tokens")
}
